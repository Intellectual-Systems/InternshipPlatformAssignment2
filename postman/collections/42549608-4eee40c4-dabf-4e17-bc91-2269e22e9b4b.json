{
	"info": {
		"_postman_id": "42549608-4eee40c4-dabf-4e17-bc91-2269e22e9b4b",
		"name": "Intellectual-Systems",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Root",
			"id": "42549608-73322220-25a1-4970-8b9c-68e595e33e75",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}",
					"host": [
						"{{host}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Initialize App",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2516b48d-7d6d-4b1e-983c-05345c4c5586",
						"exec": [
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"\r",
							"if(pm.response.headers.get('Content-Type') == 'application/json'){\r",
							"\r",
							"\tconst {message} = pm.response.json();\r",
							"\r",
							"\tpm.test(\"Should return the message 'Database Initialized!'\", function () {\r",
							"\t\t\tpm.expect(message).to.eql('Database Initialized!');\r",
							"\t\t}\r",
							"\t);\r",
							"\r",
							"\tpm.test(\"Should have the correct status code\", function () {\r",
							"\t\t\r",
							"\t\tpm.expect(pm.response.code).to.eql(200);\r",
							"\t\t\r",
							"\t});\r",
							"\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"id": "42549608-4630ec10-c4fc-41c1-b33b-688bffaa4b41",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/init",
					"host": [
						"{{host}}"
					],
					"path": [
						"init"
					]
				}
			},
			"response": []
		},
		{
			"name": "Sign Up - Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1882e906-b393-4368-bb02-a26a69031eb9",
						"exec": [
							"let { username, password} = JSON.parse(pm.request.body.raw);",
							"",
							"pm.collectionVariables.set('username', username);",
							"pm.collectionVariables.set('password', password);",
							"",
							"pm.test(",
							"\t\"Should respond with <username> created message\", ",
							"\tfunction () {",
							"\t\tlet { message } = pm.response.json();",
							"    \tpm.expect(message).to.eql(`${username} created`);",
							"\t}",
							");",
							"",
							"pm.test(",
							"\t\"Should respond with the correct status\", ",
							"\tfunction () {",
							"\t\tpm.response.to.have.status(201);",
							"\t}",
							");",
							"",
							"",
							"// let { error, message } = pm.response.json();",
							"// \tpm.expect(error ?? message).to.be.oneOf([\"username or email already exists\", \"user created\"]);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "368defa5-61ed-4fca-aafe-fbba0ca7d766",
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"id": "42549608-abb336b4-b55b-457f-95bb-eb3801da7203",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\": \"{{$randomUserName}}\",\n\t\"password\": \"{{$randomPassword}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users"
					]
				},
				"description": "Allows the user to create a user account returns an appropriate message and status."
			},
			"response": [
				{
					"id": "42549608-bd864e7c-e5ce-4525-aa19-987f2dc268db",
					"name": "Sign Up - Success",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{$randomUserName}}\",\n\t\"email\": \"{{$randomEmail}}\",\n\t\"password\": \"{{$randomPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"signup"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "44"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Date",
							"value": "Sun, 03 Mar 2024 00:33:57 GMT"
						},
						{
							"key": "Server",
							"value": "Werkzeug/3.0.1 Python/3.8.16"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": "{\n    \"message\": \"Jennings.Goodwin created\"\n}"
				}
			]
		},
		{
			"name": "Login - Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4dd6f25f-fb2a-435c-ba86-801dfb356ba4",
						"exec": [
							"pm.test(\"Returned Access Token\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.collectionVariables.set('access_token', jsonData['access_token']) ",
							"});",
							"",
							"",
							"   "
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "42d33f6e-f97c-4214-ace3-a0291b1f827c",
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"id": "42549608-beea6f26-44e9-48b7-99ab-aa01534ac4e5",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\": \"{{username}}\",\r\n\t\"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"login"
					]
				},
				"description": "Allows a user to login and recieve their token"
			},
			"response": [
				{
					"id": "42549608-c97a583c-1cc6-4534-a016-8eb36964ac4c",
					"name": "Login - Success",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\": \"{{username}}\",\r\n\t\"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"login"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "309"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Date",
							"value": "Sun, 03 Mar 2024 00:39:18 GMT"
						},
						{
							"key": "Server",
							"value": "Werkzeug/3.0.1 Python/3.8.16"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": "{\n    \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTcwOTQyNjM1OCwianRpIjoiYzE4ODBjNjEtYjg4Ny00Mzk3LWE4YTQtNzk5M2U1MjU4MjdmIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6Ikplbm5pbmdzLkdvb2R3aW4iLCJuYmYiOjE3MDk0MjYzNTgsImV4cCI6MTcwOTQ4MDM1OH0.I7MDJf8BRwuvzCX0O8rDEocJXsv7yHx3E8BNwUw8PYw\"\n}"
				}
			]
		},
		{
			"name": "Get users",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "65795fba-f4f0-4fec-8522-27aaaa92b64f",
						"exec": [
							"var schema = {\r",
							"  \"type\": \"array\",\r",
							"  \"items\": {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"\t\t\"id\":{\"type\":\"number\"},\r",
							"        \"username\":{\"type\":\"string\"}\r",
							"    },\r",
							"    \"required\": [ \"id\", \"username\"]\r",
							"  }\r",
							"};\r",
							"\r",
							"\r",
							"pm.test(\r",
							"    `User should have an id and username with the appropriate values`, \r",
							"    function() {\r",
							"        var jsonData = pm.response.json();\r",
							"        pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"    }\r",
							");"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"id": "42549608-ca3f1948-463e-455f-abd6-b33d26eee5b1",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": ""
				}
			},
			"response": []
		},
		{
			"name": "List Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b3813f70-7234-4083-bec8-5d20fbd3a1c8",
						"exec": [
							"var schema = {\r",
							"  \"type\": \"array\",\r",
							"  \"items\": {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"employers\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\" : {\r",
							"                \"type\" : \"object\",\r",
							"                \"properties\": {\r",
							"                    \"companyName\": { \"type\": \"string\" },\r",
							"                    \"id\": { \"type\": \"number\" },\r",
							"                    \"username\": { \"type\": \"string\" }\r",
							"                }\r",
							"            \r",
							"            }\r",
							"        },\r",
							"        \"staff\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\r",
							"                \"type\": \"object\",\r",
							"                \"properties\": {\r",
							"                    \"employerID\": { \"type\": \"number\" },\r",
							"                    \"id\":{\"type\":\"number\"},\r",
							"                    \"username\":{\"type\":\"string\"}\r",
							"                }\r",
							"            }\r",
							"        },\r",
							"        \"students\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\r",
							"                \"type\": \"object\",\r",
							"                \"properties\": {\r",
							"                    \"degree\": { \"type\": \"string\" },\r",
							"                    \"department\": { \"type\": \"string\" },\r",
							"                    \"faculty\": { \"type\": \"string\" },\r",
							"                    \"gpa\": { \"type\": \"number\" },\r",
							"                    \"id\":{\"type\":\"number\"},\r",
							"                    \"username\":{\"type\":\"string\"}\r",
							"                }\r",
							"            }\r",
							"        }\r",
							"    },\r",
							"    \"required\": [  ]\r",
							"    }\r",
							"};\r",
							"\r",
							"\r",
							"pm.test(\r",
							"    `Users should have an employers, staff and students with the appropriate values`, \r",
							"    function() {\r",
							"        var jsonData = pm.response.json();\r",
							"        pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"    }\r",
							");"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "221b6bb6-6a38-4051-ba71-abe3bf0b4d89",
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"id": "42549608-3220968a-8a9a-4783-bb60-383d13cf105c",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}} /list",
					"host": [
						"{{host}} "
					],
					"path": [
						"list"
					]
				}
			},
			"response": []
		},
		{
			"name": "List Employers",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ce8dab7e-5b2e-4218-be5f-a75088e60a04",
						"exec": [
							"var schema = {\r",
							"  \"type\": \"array\",\r",
							"  \"items\": {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"companyName\":{\"type\":\"string\"},\r",
							"\t\t\"id\":{\"type\":\"number\"},\r",
							"        \"username\":{\"type\":\"string\"}\r",
							"    },\r",
							"    \"required\": [ \"companyName\", \"id\", \"username\"]\r",
							"  }\r",
							"};\r",
							"\r",
							"\r",
							"pm.test(\r",
							"    `Employer should have an companyName, id and username with the appropriate values`, \r",
							"    function() {\r",
							"        var jsonData = pm.response.json();\r",
							"        pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"    }\r",
							");"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"id": "42549608-56d92c61-e5f6-48ac-98d0-f0229bd3dbb8",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/list-emp",
					"host": [
						"{{host}}"
					],
					"path": [
						"list-emp"
					]
				}
			},
			"response": []
		},
		{
			"name": "List Positions",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dca410f4-df70-4a09-9e98-e005f2a6043a",
						"exec": [
							"var schema = {\r",
							"  \"type\": \"array\",\r",
							"  \"items\": {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"department\": {\"type\":\"string\"},\r",
							"        \"description\": { \"type\": \"string\" },\r",
							"        \"employerID\": { \"type\": \"number\" }, \r",
							"\t\t\"id\":{\"type\":\"number\"},\r",
							"        \"positionTitle\":{\"type\":\"string\"},\r",
							"        \"shortlist\": { \r",
							"            \"type\": \"array\", \r",
							"            \"items\": { \"type\": \"number\" }\r",
							"        }\r",
							"    },\r",
							"      \"required\": [\"department\", \"description\", \"employerID\", \"id\", \"positionTitle\", \"shortlist\"]\r",
							"  }\r",
							"};\r",
							"\r",
							"\r",
							"pm.test(\r",
							"    `Positions should have a department, description, employerID, id, positionTitle and shortlist with the appropriate values`, \r",
							"    function() {\r",
							"        var jsonData = pm.response.json();\r",
							"        pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"    }\r",
							");\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"id": "42549608-1795730c-ffc0-4b9e-b670-1b06466f616e",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/list-pos",
					"host": [
						"{{host}}"
					],
					"path": [
						"list-pos"
					]
				}
			},
			"response": []
		},
		{
			"name": "List Staff",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2073599a-2f6f-43d8-af0c-8da4da8d3938",
						"exec": [
							"var schema = {\r",
							"  \"type\": \"array\",\r",
							"  \"items\": {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"employerID\": { \"type\": \"number\" },\r",
							"\t\t\"id\":{\"type\":\"number\"},\r",
							"        \"username\":{\"type\":\"string\"}\r",
							"    },\r",
							"    \"required\": [ \"employerID\", \"id\", \"username\"]\r",
							"  }\r",
							"};\r",
							"\r",
							"\r",
							"pm.test(\r",
							"    `Staff should have an employerID, id and username with the appropriate values`, \r",
							"    function() {\r",
							"        var jsonData = pm.response.json();\r",
							"        pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"    }\r",
							");"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"id": "42549608-62174a9b-3239-418e-b713-8aaec28e59f6",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/list-sta",
					"host": [
						"{{host}}"
					],
					"path": [
						"list-sta"
					]
				}
			},
			"response": []
		},
		{
			"name": "List Shortlists",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "511e762f-4db6-49c5-ba95-d8cd8ff91cdd",
						"exec": [
							"var schema = {\r",
							"  \"type\": \"array\",\r",
							"  \"items\": {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"employer_response\": { \"type\": \"string\" },\r",
							"        \"positionID\": { \"type\": \"number\" },\r",
							"        \"status\": { \"type\": \"string\" },\r",
							"        \"studentID\": { \"type\": \"number\" }\r",
							"    },\r",
							"      \"required\": [\"employer_response\", \"positionID\", \"status\", \"studentID\"]\r",
							"  }\r",
							"};\r",
							"\r",
							"\r",
							"pm.test(\r",
							"    `Staff should have employer_response, positionID, status and studentID with the appropriate values`, \r",
							"    function() {\r",
							"        var jsonData = pm.response.json();\r",
							"        pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"    }\r",
							");"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"id": "42549608-7367830e-f450-4097-9f11-fbe49f1c28af",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/list-sho",
					"host": [
						"{{host}}"
					],
					"path": [
						"list-sho"
					]
				}
			},
			"response": []
		}
	]
}